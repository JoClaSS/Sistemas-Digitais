
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000751  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000989  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000133  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setupA0>:
#include <util/delay.h>
#include <math.h>

int setupA0(){
	unsigned int adcA0;
	DDRD = 0xFC;
  80:	8c ef       	ldi	r24, 0xFC	; 252
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	84 b9       	out	0x04, r24	; 4
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
  9c:	80 81       	ld	r24, Z
  9e:	86 fd       	sbrc	r24, 6
  a0:	fd cf       	rjmp	.-6      	; 0x9c <setupA0+0x1c>
	adcA0 = (ADC>>3);
  a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcA0;
}
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
  ae:	96 95       	lsr	r25
  b0:	87 95       	ror	r24
  b2:	96 95       	lsr	r25
  b4:	87 95       	ror	r24
  b6:	08 95       	ret

000000b8 <setupA1>:

int setupA1(){
	unsigned int adcA1;
	DDRD = 0xFC;
  b8:	8c ef       	ldi	r24, 0xFC	; 252
  ba:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x03;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	84 b9       	out	0x04, r24	; 4
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0) | (1<<MUX0);
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <setupA1+0x1c>
	adcA1 = (ADC>>3);
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcA1;
}
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
  f0:	c8 ec       	ldi	r28, 0xC8	; 200
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned long int SAD1 = 0;
    while(1) 
    {
		int i;
		for(i = 0;i<200;i++){
		A0 = setupA0();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <setupA0>
  f8:	8c 01       	movw	r16, r24
		A1 = setupA1();
  fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <setupA1>
  fe:	ac 01       	movw	r20, r24
		SAD0 = (A0 - A1);
 100:	c8 01       	movw	r24, r16
 102:	11 0f       	add	r17, r17
 104:	aa 0b       	sbc	r26, r26
 106:	bb 0b       	sbc	r27, r27
 108:	05 2e       	mov	r0, r21
 10a:	00 0c       	add	r0, r0
 10c:	66 0b       	sbc	r22, r22
 10e:	77 0b       	sbc	r23, r23
 110:	84 1b       	sub	r24, r20
 112:	95 0b       	sbc	r25, r21
 114:	a6 0b       	sbc	r26, r22
 116:	b7 0b       	sbc	r27, r23
		SAD1 = SAD1 + SAD0;
			SAD = SAD1;
			SAD1 = 0;
			PORTD = ((SAD & 0b0000000000111111)<<2);
 118:	28 2f       	mov	r18, r24
 11a:	22 0f       	add	r18, r18
 11c:	22 0f       	add	r18, r18
 11e:	2b b9       	out	0x0b, r18	; 11
			PORTB = ((SAD & 0b0000000011000000)>>6);
 120:	80 7c       	andi	r24, 0xC0	; 192
 122:	99 27       	eor	r25, r25
 124:	aa 27       	eor	r26, r26
 126:	bb 27       	eor	r27, r27
 128:	68 94       	set
 12a:	15 f8       	bld	r1, 5
 12c:	b6 95       	lsr	r27
 12e:	a7 95       	ror	r26
 130:	97 95       	ror	r25
 132:	87 95       	ror	r24
 134:	16 94       	lsr	r1
 136:	d1 f7       	brne	.-12     	; 0x12c <main+0x3c>
 138:	85 b9       	out	0x05, r24	; 5
 13a:	21 97       	sbiw	r28, 0x01	; 1
	unsigned long int SAD,SAD0,A0,A1;
	unsigned long int SAD1 = 0;
    while(1) 
    {
		int i;
		for(i = 0;i<200;i++){
 13c:	d9 f6       	brne	.-74     	; 0xf4 <main+0x4>
 13e:	d8 cf       	rjmp	.-80     	; 0xf0 <main>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
