
P3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe3  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a00  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000304b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  9e:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write>:
			else if (modo == 3 || modo == 6 || modo == 9) sem = sem - 1;
		}
		
	}

void happyday(uint8_t dia){
  a6:	82 95       	swap	r24
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	2b 98       	cbi	0x05, 3	; 5
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_write+0xa>
  b4:	00 00       	nop
  b6:	2b 9a       	sbi	0x05, 3	; 5
  b8:	95 e0       	ldi	r25, 0x05	; 5
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_write+0x14>
  be:	00 00       	nop
  c0:	2b 98       	cbi	0x05, 3	; 5
  c2:	8f e8       	ldi	r24, 0x8F	; 143
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_write+0x20>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_write+0x26>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <lcd_write_byte>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	82 95       	swap	r24
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <lcd_print>:
  e6:	2c 9a       	sbi	0x05, 4	; 5
  e8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
  ec:	2c 98       	cbi	0x05, 4	; 5
  ee:	08 95       	ret

000000f0 <lcd_begin>:
  f0:	8a e1       	ldi	r24, 0x1A	; 26
  f2:	84 b9       	out	0x04, r24	; 4
  f4:	80 ef       	ldi	r24, 0xF0	; 240
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	80 e7       	ldi	r24, 0x70	; 112
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <lcd_begin+0xe>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_begin+0x18>
 108:	00 00       	nop
 10a:	2c 98       	cbi	0x05, 4	; 5
 10c:	2b 98       	cbi	0x05, 3	; 5
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	80 62       	ori	r24, 0x20	; 32
 114:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 118:	8f e4       	ldi	r24, 0x4F	; 79
 11a:	96 e4       	ldi	r25, 0x46	; 70
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_begin+0x2c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_begin+0x32>
 122:	00 00       	nop
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 12e:	87 e5       	ldi	r24, 0x57	; 87
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_begin+0x42>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_begin+0x48>
 138:	00 00       	nop
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9f e1       	ldi	r25, 0x1F	; 31
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_begin+0x74>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_begin+0x7a>
 16a:	00 00       	nop
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_displaymode>
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_byte>
 178:	08 95       	ret

0000017a <main>:
	case 5: diadehoje[3] = "SEX";
	case 6: diadehoje[3] = "SAB";
 }
}

	int main(void){
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <main+0x6>
 180:	1f 92       	push	r1
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
		uint8_t horaC,minutoC,semC;
		int estado = 0;
		DDRB = 0XF8;
 186:	88 ef       	ldi	r24, 0xF8	; 248
 188:	84 b9       	out	0x04, r24	; 4
		DDRD = 0XFC;
 18a:	8c ef       	ldi	r24, 0xFC	; 252
 18c:	8a b9       	out	0x0a, r24	; 10
		lcd_begin();
 18e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_begin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	83 ed       	ldi	r24, 0xD3	; 211
 196:	90 e3       	ldi	r25, 0x30	; 48
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x1e>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x28>
 1a2:	00 00       	nop
		_delay_ms(1000);
		char texto[3] = "QUA";
 1a4:	81 e5       	ldi	r24, 0x51	; 81
 1a6:	95 e5       	ldi	r25, 0x55	; 85
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	8b 83       	std	Y+3, r24	; 0x03
 1b0:	8e 01       	movw	r16, r28
 1b2:	0f 5f       	subi	r16, 0xFF	; 255
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
 1b6:	7e 01       	movw	r14, r28
 1b8:	e4 e0       	ldi	r30, 0x04	; 4
 1ba:	ee 0e       	add	r14, r30
 1bc:	f1 1c       	adc	r15, r1
		for(int n=0;n<3;n++){
			lcd_print(texto[n]);
 1be:	f8 01       	movw	r30, r16
 1c0:	81 91       	ld	r24, Z+
 1c2:	8f 01       	movw	r16, r30
 1c4:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_print>
 1c8:	ff ef       	ldi	r31, 0xFF	; 255
 1ca:	21 ee       	ldi	r18, 0xE1	; 225
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	f1 50       	subi	r31, 0x01	; 1
 1d0:	20 40       	sbci	r18, 0x00	; 0
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x54>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x5e>
 1d8:	00 00       	nop
		DDRB = 0XF8;
		DDRD = 0XFC;
		lcd_begin();
		_delay_ms(1000);
		char texto[3] = "QUA";
		for(int n=0;n<3;n++){
 1da:	0e 15       	cp	r16, r14
 1dc:	1f 05       	cpc	r17, r15
 1de:	79 f7       	brne	.-34     	; 0x1be <main+0x44>
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <main+0x66>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
