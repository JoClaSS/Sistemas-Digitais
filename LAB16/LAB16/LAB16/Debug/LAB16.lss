
LAB16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094d  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d5  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_11>
  30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_12>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_PWM>:
	TCCR1B |= (1<<CS12) |  (1<<WGM12); // prescala 256, CTC
	TIMSK1 |= (1<<OCIE1A);
	OCR1A = ((F_CPU/freq*2*256)-1);
}
int init_PWM(int DCa,int DCb)
{
  80:	9c 01       	movw	r18, r24
 TCCR1B |= (1<<CS10) |  (1<<WGM12); //sem prescala, CTC 
  82:	e1 e8       	ldi	r30, 0x81	; 129
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	90 81       	ld	r25, Z
  88:	99 60       	ori	r25, 0x09	; 9
  8a:	90 83       	st	Z, r25
 TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B); //OUTPUT compara com IRQ
  8c:	ef e6       	ldi	r30, 0x6F	; 111
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	90 81       	ld	r25, Z
  92:	96 60       	ori	r25, 0x06	; 6
  94:	90 83       	st	Z, r25
 OCR1A = DCa;
  96:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  9a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 OCR1B = DCb;
  9e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  a2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 return 0;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <notseno>:

void notseno(){
	int BITi = 2;
	if(DDRC == 0X01){
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	81 f4       	brne	.+32     	; 0xd2 <notseno+0x26>
		PORTD = 0XFC;
  b2:	8c ef       	ldi	r24, 0xFC	; 252
  b4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9c e8       	ldi	r25, 0x8C	; 140
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <notseno+0xe>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <notseno+0x14>
  c0:	00 00       	nop
		_delay_ms(9);  //duty cycle 50%
		PORTD = 0X00;
  c2:	1b b8       	out	0x0b, r1	; 11
  c4:	ef e9       	ldi	r30, 0x9F	; 159
  c6:	fc e8       	ldi	r31, 0x8C	; 140
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <notseno+0x1c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <notseno+0x22>
  ce:	00 00       	nop
  d0:	08 95       	ret
		_delay_ms(9);
	}
	else if(DDRC == 0X10){
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	91 f5       	brne	.+100    	; 0x13c <notseno+0x90>
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
		for(BITi = 2;BITi <= 7;BITi++){
			set_bit(PORTD,BITi);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	4b b1       	in	r20, 0x0b	; 11
  e2:	9b 01       	movw	r18, r22
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <notseno+0x40>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <notseno+0x3c>
  f0:	24 2b       	or	r18, r20
  f2:	2b b9       	out	0x0b, r18	; 11
  f4:	ef e3       	ldi	r30, 0x3F	; 63
  f6:	ff e1       	ldi	r31, 0x1F	; 31
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <notseno+0x4c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <notseno+0x52>
  fe:	00 00       	nop
		_delay_ms(9);  //duty cycle 50%
		PORTD = 0X00;
		_delay_ms(9);
	}
	else if(DDRC == 0X10){
		for(BITi = 2;BITi <= 7;BITi++){
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	91 05       	cpc	r25, r1
 106:	61 f7       	brne	.-40     	; 0xe0 <notseno+0x34>
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	90 e0       	ldi	r25, 0x00	; 0
			set_bit(PORTD,BITi);
			_delay_ms(2); // 18/12 = 1.5 = 2
		}
		for(BITi = 7;BITi >= 2;BITi--){
			clr_bit(PORTD,BITi);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	3b b1       	in	r19, 0x0b	; 11
 112:	ab 01       	movw	r20, r22
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <notseno+0x70>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <notseno+0x6c>
 120:	24 2f       	mov	r18, r20
 122:	20 95       	com	r18
 124:	23 23       	and	r18, r19
 126:	2b b9       	out	0x0b, r18	; 11
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <notseno+0x80>
 130:	00 c0       	rjmp	.+0      	; 0x132 <notseno+0x86>
 132:	00 00       	nop
	else if(DDRC == 0X10){
		for(BITi = 2;BITi <= 7;BITi++){
			set_bit(PORTD,BITi);
			_delay_ms(2); // 18/12 = 1.5 = 2
		}
		for(BITi = 7;BITi >= 2;BITi--){
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	91 05       	cpc	r25, r1
 13a:	51 f7       	brne	.-44     	; 0x110 <notseno+0x64>
 13c:	08 95       	ret

0000013e <inputseno>:
			_delay_ms(2);
		}
	}
}

void inputseno(int x,int y){
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	7c 01       	movw	r14, r24
 154:	8b 01       	movw	r16, r22
 156:	5c 01       	movw	r10, r24
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	a8 1a       	sub	r10, r24
 15c:	8e ef       	ldi	r24, 0xFE	; 254
 15e:	b8 0a       	sbc	r11, r24
 160:	6b 01       	movw	r12, r22
 162:	e7 01       	movw	r28, r14
	int i = 0;
	for(i=0;i<5;i++){
	 init_PWM(x,y);
 164:	b6 01       	movw	r22, r12
 166:	ce 01       	movw	r24, r28
 168:	0e 94 40 00 	call	0x80	; 0x80 <init_PWM>
	 x = x + 100;
 16c:	cc 59       	subi	r28, 0x9C	; 156
 16e:	df 4f       	sbci	r29, 0xFF	; 255
	 y = y - 100;
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	c8 1a       	sub	r12, r24
 174:	d1 08       	sbc	r13, r1
	}
}

void inputseno(int x,int y){
	int i = 0;
	for(i=0;i<5;i++){
 176:	ac 16       	cp	r10, r28
 178:	bd 06       	cpc	r11, r29
 17a:	a1 f7       	brne	.-24     	; 0x164 <inputseno+0x26>
 17c:	e7 01       	movw	r28, r14
 17e:	cc 50       	subi	r28, 0x0C	; 12
 180:	de 4f       	sbci	r29, 0xFE	; 254
 182:	04 5f       	subi	r16, 0xF4	; 244
 184:	11 40       	sbci	r17, 0x01	; 1
	 init_PWM(x,y);
	 x = x + 100;
	 y = y - 100;
	}
	for(i=5;i>0;i--){
	 init_PWM(x,y);
 186:	b8 01       	movw	r22, r16
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 40 00 	call	0x80	; 0x80 <init_PWM>
	 x = x - 100;
 18e:	c4 56       	subi	r28, 0x64	; 100
 190:	d1 09       	sbc	r29, r1
	 y = y + 100;
 192:	0c 59       	subi	r16, 0x9C	; 156
 194:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<5;i++){
	 init_PWM(x,y);
	 x = x + 100;
	 y = y - 100;
	}
	for(i=5;i>0;i--){
 196:	ec 16       	cp	r14, r28
 198:	fd 06       	cpc	r15, r29
 19a:	a9 f7       	brne	.-22     	; 0x186 <inputseno+0x48>
	 init_PWM(x,y);
	 x = x - 100;
	 y = y + 100;
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	df 90       	pop	r13
 1aa:	cf 90       	pop	r12
 1ac:	bf 90       	pop	r11
 1ae:	af 90       	pop	r10
 1b0:	08 95       	ret

000001b2 <__vector_11>:
ISR (TIMER1_COMPA_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
   notseno();
 1d4:	0e 94 56 00 	call	0xac	; 0xac <notseno>
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_12>:
ISR (TIMER1_COMPB_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
   inputseno(500,500);	
 21c:	64 ef       	ldi	r22, 0xF4	; 244
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	84 ef       	ldi	r24, 0xF4	; 244
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 9f 00 	call	0x13e	; 0x13e <inputseno>
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <main>:

int main(void)
{
    //Garantir ; T = 1/60 = 0,018s = 18ms
    DDRD = 0xFC;
 24a:	8c ef       	ldi	r24, 0xFC	; 252
 24c:	8a b9       	out	0x0a, r24	; 10
	init_PWM(500,500);
 24e:	64 ef       	ldi	r22, 0xF4	; 244
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	84 ef       	ldi	r24, 0xF4	; 244
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 40 00 	call	0x80	; 0x80 <init_PWM>
	sei();
 25a:	78 94       	sei
 25c:	ff cf       	rjmp	.-2      	; 0x25c <main+0x12>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
