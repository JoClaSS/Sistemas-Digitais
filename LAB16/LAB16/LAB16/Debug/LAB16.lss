
LAB16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b7  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	int BITi;
    //Garantir ; T = 1/60 = 0,018s = 18ms
    DDRD = 0xFC;
  80:	8c ef       	ldi	r24, 0xFC	; 252
  82:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0X00;
		_delay_ms(9);
	}
	else
	  for(BITi = 2;BITi <= 7;BITi++){
	     set_bit(PORTD,BITi);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	70 e0       	ldi	r23, 0x00	; 0
	int BITi;
    //Garantir ; T = 1/60 = 0,018s = 18ms
    DDRD = 0xFC;
	while(1){
	if(DDRC == 0X01){
		PORTD = 0XFC;
  88:	ec ef       	ldi	r30, 0xFC	; 252
{
	int BITi;
    //Garantir ; T = 1/60 = 0,018s = 18ms
    DDRD = 0xFC;
	while(1){
	if(DDRC == 0X01){
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	79 f4       	brne	.+30     	; 0xae <main+0x2e>
		PORTD = 0XFC;
  90:	eb b9       	out	0x0b, r30	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e9       	ldi	r24, 0x9F	; 159
  94:	9c e8       	ldi	r25, 0x8C	; 140
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x16>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
		_delay_ms(9);  //duty cycle 50%
		PORTD = 0X00;
  9e:	1b b8       	out	0x0b, r1	; 11
  a0:	af e9       	ldi	r26, 0x9F	; 159
  a2:	bc e8       	ldi	r27, 0x8C	; 140
  a4:	11 97       	sbiw	r26, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
  ac:	2e c0       	rjmp	.+92     	; 0x10a <main+0x8a>
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(9);
	}
	else
	  for(BITi = 2;BITi <= 7;BITi++){
	     set_bit(PORTD,BITi);
  b2:	4b b1       	in	r20, 0x0b	; 11
  b4:	9b 01       	movw	r18, r22
  b6:	08 2e       	mov	r0, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x3e>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x3a>
  c2:	24 2b       	or	r18, r20
  c4:	2b b9       	out	0x0b, r18	; 11
  c6:	af e3       	ldi	r26, 0x3F	; 63
  c8:	bf e1       	ldi	r27, 0x1F	; 31
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x4a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
		_delay_ms(9);  //duty cycle 50%
		PORTD = 0X00;
		_delay_ms(9);
	}
	else
	  for(BITi = 2;BITi <= 7;BITi++){
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	61 f7       	brne	.-40     	; 0xb2 <main+0x32>
  da:	17 c0       	rjmp	.+46     	; 0x10a <main+0x8a>
	     set_bit(PORTD,BITi);
	     _delay_ms(2); // 18/12 = 1.5 = 2  
	  }
	  for(BITi = 7;BITi >= 2;BITi--){
		  clr_bit(PORTD,BITi);
  dc:	3b b1       	in	r19, 0x0b	; 11
  de:	ab 01       	movw	r20, r22
  e0:	08 2e       	mov	r0, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x68>
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x64>
  ec:	24 2f       	mov	r18, r20
  ee:	20 95       	com	r18
  f0:	23 23       	and	r18, r19
  f2:	2b b9       	out	0x0b, r18	; 11
  f4:	af e3       	ldi	r26, 0x3F	; 63
  f6:	bf e1       	ldi	r27, 0x1F	; 31
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x78>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
	else
	  for(BITi = 2;BITi <= 7;BITi++){
	     set_bit(PORTD,BITi);
	     _delay_ms(2); // 18/12 = 1.5 = 2  
	  }
	  for(BITi = 7;BITi >= 2;BITi--){
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 05       	cpc	r25, r1
 106:	51 f7       	brne	.-44     	; 0xdc <main+0x5c>
 108:	c0 cf       	rjmp	.-128    	; 0x8a <main+0xa>
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	e6 cf       	rjmp	.-52     	; 0xdc <main+0x5c>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
